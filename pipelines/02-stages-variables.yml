#Pipeline > Stages > Jobs > Steps(Task)
#By default the job run in parallel 
# Free tier azure devops -> private project: one free job - max limit  - 60 minutes per job. 30 hours per month
#                        -> public project: 10 free Microsoft-hosted parallel jobs

#Settings Pipeline ->  Processing of new run requests -> disabled


trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  - job: FirstJob
    steps:
    - bash: echo Build FirstJob
    - bash: echo $(PipelineLevelVariable) #In azure devops, you can check the option "Variables" in the pipeline yml interface
    - bash: echo Build.BuildNumber -> $(Build.BuildNumber)
    - bash: echo Build.BuildId -> $(Build.BuildId)
    - bash: echo Build.SourceBranchName -> $(Build.SourceBranchName)
    - bash: echo Build.SourcesDirectory | echo $(Build.SourcesDirectory)
    - bash: echo System.DefaultWorkingDirectory | echo $(System.DefaultWorkingDirectory)
    - script: |
         echo ls -R System.DefaultWorkingDirectory
         ls -R $(System.DefaultWorkingDirectory)
    - bash: echo Build.ArtifactStagingDirectory | echo $(Build.ArtifactStagingDirectory)
    - bash: java -version
    - bash: node --version
    - bash: python --version 
    - bash: mvn -version 
    - script: |
         echo ls -R Build.ArtifactStagingDirectory
         ls -R $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **/*.yaml
          **/*.tf
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - bash: ls -R $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
  - job: SecondJob
    steps:
    - bash: echo Build SecondJob
- stage: DevDeploy
  variables:
    environment: Dev
  dependsOn: Build
  jobs:
  - job: DevDeployJob
    steps:
    - bash: echo $(environment)DeployJob
- stage: QADeploy
  variables:
    environment: QA
  dependsOn: Build
  jobs:
  - job: QADeployJob
    steps:
    - bash: echo $(environment)DeployJob
- stage: ProdDeploy
  dependsOn: 
  - DevDeploy
  - QADeploy
  jobs:
  - job: ProdDeployJob
    steps:
    - bash: echo ProdDeployJob