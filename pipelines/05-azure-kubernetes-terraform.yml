trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
  - task: DownloadSecureFile@1
    name: publickey
    inputs:
      secureFile: 'id_rsa.pub'
      
  - task: TerraformCLI@0
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes/'
      commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
      backendType: 'azurerm'
      backendServiceArm: 'azure-resource-manager-service-connection'
      ensureBackend: true
      backendAzureRmResourceGroupName: 'terraform-backend-rg'
      backendAzureRmResourceGroupLocation: 'eastus'
      backendAzureRmStorageAccountName: 'storageaccstrevensaks'
      backendAzureRmContainerName: 'containerstrevensaks'
      backendAzureRmKey: 'aks-dev.tfstate'
      allowTelemetryCollection: true
    displayName: 'init aks terraform'
  - task: TerraformCLI@0
    inputs:
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes/'
      environmentServiceName: 'azure-resource-manager-service-connection'
      commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
      allowTelemetryCollection: true
    displayName: 'apply aks terraform'
  - task: TerraformCLI@0
    inputs:
      command: 'destroy'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes/'
      environmentServiceName: 'azure-resource-manager-service-connection'
      commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
    displayName: 'destroy aks terraform'